name: Deploy Dev AWS ECR

on:
  workflow_dispatch:
  push:
    branches: [ main, complete ]

env:
  IMAGE_TAG: ${{ github.run_number }}
  CONTAINER_NAME: ecommerce
  REGISTRY: docker.io
  IMAGE_NAME: ${{ github.actor }}/ecommerce:$IMAGE_TAG
  ECR_REPOSITORY: ${{ vars.AWS_ECR_REPO }}
  AWS_ECR_REGISTRY: ${{ vars.AWS_ECR_REGISTRY }}

jobs:
  project-build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5
        name: Set checkout action token

      - name: Set up JDK 25
        uses: actions/setup-java@v5
        with:
          java-version: '25'
          distribution: 'corretto'

      - name: Set up the Maven dependencies caching
        uses: actions/cache@v4
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: Cache Maven packages
        uses: actions/cache@v4
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: Install Maven dependencies
        run: mvn clean install

      - name: Run tests
        run: mvn clean --batch-mode --update-snapshots verify

      - name: Build jar file
        run: mvn clean -B package --file pom.xml

      # Optional: Uploads the full dependency graph to GitHub to improve the quality of Dependabot alerts this repository can receive
      - name: Update dependency graph
        uses: advanced-security/maven-dependency-submission-action@b275d12641ac2d2108b2cbb7598b154ad2f2cee8

  push-to-docker-hub:
    runs-on: ubuntu-latest
    needs:
      - project-build
    steps:
      - uses: actions/checkout@v5

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log into the Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ vars.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Scrape build info
        run: echo "RELEASE_VERSION=${GITHUB_REF#refs/*/}" >> $GITHUB_ENV

      - name: Build and push
        uses: docker/build-push-action@v6
        with:
          context: .
          file: Dockerfile
          push: true
          labels: ${{ steps.meta.outputs.labels }}
          tags: hendisantika/ecommerce:${{ github.run_number }}
          build-args: |
            GIT_VERSION_TAG=${{ env.RELEASE_VERSION }}
            GIT_COMMIT_MESSAGE=${{ github.event.head_commit.message }}
            GIT_VERSION_HASH=${{ github.sha }}

  push-to-github-container-registry:
    runs-on: ubuntu-latest
    needs:
      - project-build
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v5

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push Docker image
        run: |
          IMAGE_NAME=ghcr.io/${{ github.repository }}
          # You can use a specific tag or 'latest'
          TAG=${{ github.run_number }}
          docker build . --tag $IMAGE_NAME:$TAG
          docker push $IMAGE_NAME:$TAG

  push-to-ecr:
    runs-on: ubuntu-latest
    needs: project-build
    env:
      IMAGE_TAG: ${{ github.run_number }}
    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - run: docker build -t movie-trailer:$IMAGE_TAG -f Dockerfile .

      - name: Push to ECR
        env:
          ECR_REGISTRY: ${{ steps.login-pf-aws-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{vars.AWS_ECR_REPO}}
          IMAGE_TAG: ${{ github.run_number }}
        id: ecr
        uses: jwalton/gh-ecr-push@v2
        with:
          access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          secret-access-key: ${{ secrets.AWS_ACCESS_SECRET_KEY }}
          region: ${{ secrets.AWS_REGION }}
          local-image: movie-trailer:$IMAGE_TAG
          image: movie-trailer:$IMAGE_TAG, movie-trailer:github-latest

  deploy:
    needs: push-to-ecr
    name: deploy image
    runs-on: ubuntu-24.04
    steps:
      - name: Checkout repo
        uses: actions/checkout@v5

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v5
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_ACCESS_SECRET_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2
        with:
          registry-type: private

      - name: Add Server key
        run: |
          touch key.txt && echo "${{ secrets.SERVER_SSH_KEY }}" > key.txt
          chmod 600 key.txt

      - name: Create SSH key
        run: |
          mkdir -p ~/.ssh/
          echo "$SSH_PRIVATE_KEY" > ~/.ssh/private.key
          sudo chmod 600 ~/.ssh/private.key
          echo "$SSH_KNOWN_HOSTS" > ~/.ssh/known_hosts
          sudo chmod 600 ~/.ssh/known_hosts
        shell: bash
        env:
          SERVER_USERNAME: ${{ secrets.SERVER_USERNAME }}
          SERVER_PORT: ${{ secrets.SERVER_PORT }}
          SERVER_HOST: ${{ secrets.SERVER_HOST }}
          SSH_PRIVATE_KEY: ${{secrets.SERVER_SSH_KEY}}
          SSH_KNOWN_HOSTS: ${{secrets.SERVER_HOST}}

      - name: Set all environments for the application
        env:
          SERVER_HOST: ${{ secrets.SERVER_HOST }}
          SERVER_PORT: ${{ secrets.SERVER_PORT }}
          SERVER_USERNAME: ${{ secrets.SERVER_USERNAME }}
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ecommerce
          IMAGE_TAG: ${{ github.run_number }}
          CONTAINER_NAME: ecommerce
          AWS_REGION: ${{ secrets.AWS_REGION }}
          AWS_ECR_REGISTRY: ${{ vars.AWS_ECR_REGISTRY }}
          AWS_ECR_REPOSITORY: ${{ vars.AWS_ECR_REPO }}
          APP_PORT: ${{ vars.APP_PORT }}
          SPRING_DATASOURCE_URL: ${{ secrets.SPRING_DATASOURCE_URL }}
          SPRING_DATASOURCE_USERNAME: ${{ secrets.SPRING_DATASOURCE_USERNAME }}
          SPRING_DATASOURCE_PASSWORD: ${{ secrets.SPRING_DATASOURCE_PASSWORD }}

        run: |
          echo AWS_REGION=$AWS_REGION >> .env
          echo AWS_ECR_REGISTRY=$AWS_ECR_REGISTRY >> .env
          echo AWS_ECR_REPOSITORY=$AWS_ECR_REPOSITORY >> .env
          echo CONTAINER_NAME=$CONTAINER_NAME >> .env
          echo ECR_REPOSITORY=$ECR_REPOSITORY >> .env
          echo IMAGE_TAG=$IMAGE_TAG >> .env
          echo APP_ENV=github >> .env
          echo SPRING_ACTIVE_PROFILE=dev >> .env
          echo APP_NAME=movie-trailer >> .env
          echo APP_PORT=$APP_PORT >> .env
          echo SPRING_DATASOURCE_URL=$SPRING_DATASOURCE_URL >> .env
          echo SPRING_DATASOURCE_USERNAME=$SPRING_DATASOURCE_USERNAME >> .env
          echo SPRING_DATASOURCE_PASSWORD=$SPRING_DATASOURCE_PASSWORD >> .env

      - name: Use SSH key
        uses: appleboy/scp-action@v1.0.0
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USERNAME }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          port: ${{ secrets.SERVER_PORT }}
          source: "./.env"  # Path to the file on your runner
          target: "~/ecommerce"  # Target directory on the server

      - name: Run the application
        env:
          SERVER_HOST: ${{ secrets.SERVER_HOST }}
          SERVER_PORT: ${{ secrets.SERVER_PORT }}
          SERVER_USERNAME: ${{ secrets.SERVER_USERNAME }}
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ecommerce
          IMAGE_TAG: ${{ github.run_number }}
          CONTAINER_NAME: ecommerce
          AWS_REGION: ${{ secrets.AWS_REGION }}
          AWS_ECR_REPOSITORY: ${{ vars.AWS_ECR_REPO }}
          AWS_ECR_REGISTRY: ${{ secrets.AWS_ECR_REGISTRY }}
          SPRING_DATASOURCE_URL: ${{ secrets.SPRING_DATASOURCE_URL }}
          SPRING_DATASOURCE_USERNAME: ${{ secrets.SPRING_DATASOURCE_USERNAME }}
          SPRING_DATASOURCE_PASSWORD: ${{ secrets.SPRING_DATASOURCE_PASSWORD }}
        run: |
          set -e
          ./deploy.sh
